/*
 *
 * Docker Orchestration Application
 *
 * The following demostrates some typical use cases
 * for the Gantry language with respect to interacting
 * with a JSON API using Gantry data structures and
 * built-in functions.
 *
 * Utilized Docker API Reference:
 * https://docs.docker.com/engine/api/v1.32/
 *
 */

string docker_host;

int watch_logs(int polls, string cid) {
  // Poll stdout of running container
  int i = 0;
  while (i < polls) {
    print_s(docker_host ^ "/containers/" ^ cid ^ "/logs?stdout=true&timestamps=true");
    string out = httpget(docker_host ^ "/containers/" ^ cid ^ "/logs?stdout=1");
    print_s(out);
    nap(3);
    i++;
  }
}

int main() {
  // The Docker API Host
  docker_host = "http://localhost";

  // Our container image and the process/cmd to launch
  object exec =
    {|
	string Image : "ubuntu:14.04",
	bool Tty : true,
	string array Cmd :
	[ "bash", "-c", "bash -c \\\"while true; do echo Hello World && uname -a; sleep 3; done\\\"" ]
    |};

  // Download Image
  string image = exec.Image;
  print_s("\n *** Pulling Container Image: [" ^ image ^ "] ***\n");
  print_s("Sending JSON:\n" ^ obj_stringify(exec) ^ "\n");
  httppost(docker_host ^ "/images/create?fromImage=" ^ image, "");

  // Create and Start Container from Image
  string exec_json = obj_stringify(exec);
  print_s("JSON Response:");
  string container_id = httppost(docker_host ^ "/containers/create", exec_json);
  print_s(container_id);

  // Grab sliced CID
  string cid = slice(container_id, 7, 17);

  // Start the container
  print_s("\n *** Starting Container: [" ^ cid ^ "] ***\n");
  httppost(docker_host ^ "/containers/" ^ cid ^ "/start", "");
  watch_logs(5, cid);

}

