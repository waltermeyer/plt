/* Author : Audrey
 * A game of Black Jack (with some rule modifications):
 * Aces are 1 point (not 1 or 11).
 * There is no special blackjack hand (comb. of face card and 11).
 * No betting.
 * Requires two players, or you can play against yourself.
 * Some extra magic! If the api call fails, player will draw a 0.
 */

int match_card(string value){
	int val = 0;
	if (value == "A"){
		val = 1;
	}
	if (value == "J" || value == "Q" || value == "K" ) {
		val = 10;
	}
	else {
		val = stoint(value);
	}
	return val;
}

int hit(string draw_url){
	string new_card = httpget(draw_url);
	int len = string_length(new_card);
	int val = 0;
	for (int i = 0; i<len; i++){
		int x = i+4;
		string temp = slice(new_card, i, x);
		if (temp == "code"){
			int index = x + 4;
			string value = slice(new_card, index, index + 1);
			string suite = slice(new_card, index + 1, index + 2);
			val = match_card(value);
			print_s("The card drawn was a : ");
			print_s(value);
			print_s("With a value of : ");
			print_i(val);
		}
	}
	return val;
}

int turn(string draw_url){
	int new = 0;
	string req = "Enter 1 to draw, anything else to stay ";
	string res = get_string(req);
	//if (res == "1"){	
	//	new = hit(draw_url);
	//}
	return new;
}

object score(object p, int new){
	bool aces = p.aces;
	bool hasten = p.hasten;
	bool twentyone = p.twentyone;
	int total = p.total_na; 
	int aces = p.aces;
	/* If current card is an ace */
	if (new == 1){
		p.aces = aces + 1;
		aces = p.aces;
	}
	/* If current card is a 10 */
	//if (new == 10){
	//	p.hasten = true;
	//	hasten = p.hasten;
	//}
	return p;
}
/*	
	if (aces > 0 && hasten == true){
		p.blackjack = true;
	}
	if (aces == 0){
		p.total_na = total + new;
		total = p.total_na;
	}
	else {
		if (new == 10){
			p.hasten = true;
		}
		p.total_na = total + new;
		total = p.total_na;
		total_temp = p.total_na;
	}
	return p;
}
*/

bool check_done(object p ){
	bool done = p.done;
	return done;
}


int main(){
	object p1 = {|
			string name : "Player 1",
			bool blackjack : false,
			bool twentyone : false,
			bool bust : false,
			bool done : false,
			bool hasten : false,
			int new : 0,
			int total_na : 0,
			int aces : 0
		    |};
	object p2 = {|
			string name : "Player 1",
			bool blackjack : false,
			bool twentyone : false,
			bool bust : false,
			bool done : false,
			bool hasten : false,
			int new : 0,
			int total_na : 0,
			int aces : 0
		    |};
	string url = "https://deckofcardsapi.com/api/deck/";
	string new_deck = httpget(url ^ "new/shuffle/");
	int len = string_length(new_deck);	
	string deck_id = slice(new_deck, len-14, len-2);
	string draw_url = url ^ deck_id ^ "/draw/?count=1";
	int p1_total = 0;
	int p2_total = 0;
	//int new = 0;
	bool done = false;
	bool p1_done = p1.done;
	bool p2_done = p2.done;
	bool t = true;
	int new = 0;
	while (p1_done == false && p2_done == false){
		print_s("===Player 1===");
		new = turn(draw_url);
	 	p1 = score(p1, new);
		print_s("===Player 2===");	
		new = turn(draw_url);
		p2 = score(p2, new);
		p1_done = check_done(p1);
		p2_done = check_done(p2);
		if (p1_done || p2_done){
			done = true;
		}
	}
	print_s("+++++ GAME OVER +++++");
	if (p1_total > 21){
		print_s("PLAYER 1 LOST (went over 21)");
		print_s("PLAYER 2 WON");
	}
	if (p1_total == 21) {
		print_s("PLAYER 1 WON (hit 21)");
		print_s("PLAYER 2 LOST");
	}
	if (p2_total > 21){
		print_s("PLAYER 2 LOST (went over 21)");
		print_s("PLAYER 1 WON");
	}
	if (p2_total == 21) {
		print_s("PLAYER 2 WON (hit 21)");
		print_s("PLAYER 1 LOST");
	}
	print_s("Player 1 total");
	print_i(p1_total);
	print_s("Player 2 total");
	print_i(p2_total);
	return 0;
}
