# Make sure ocamlbuild can find opam-managed packages: first run
#
# eval `opam config env`

# Easiest way to build: using ocamlbuild, which in turn uses ocamlfind


all : gantry.native string_concat.o gantrylib_http.o


gantry.native :
	ocamlbuild -use-ocamlfind -pkgs llvm,llvm.analysis -cflags -w,+a-4 \
		gantry.native

# "make clean" removes all generated files

.PHONY : clean
clean :
	ocamlbuild -clean
	rm -rf testall.log *.diff gantry scanner.ml parser.ml parser.mli
	rm -rf printbig
	rm -rf string_concat string_concat.o
	rm -rf gantrylib_http
	rm -rf *.cmx *.cmi *.cmo *.cmx *.o *.s *.ll *.out *.exe *.err

# More detailed: build using ocamlc/ocamlopt + ocamlfind to locate LLVM

OBJS = ast.cmx codegen.cmx parser.cmx scanner.cmx semant.cmx gantry.cmx

gantry : $(OBJS)
#	ocamlfind ocamlopt -linkpkg -package llvm -package llvm.analysis $(OBJS) -o gantry
	ocamlfind ocamlopt -linkpkg -package llvm  -package llvm.analysis $(OBJS) -o gantry

scanner.ml : scanner.mll
	ocamllex scanner.mll

parser.ml parser.mli : parser.mly
	ocamlyacc -v parser.mly

%.cmo : %.ml
	ocamlc -c $<

%.cmi : %.mli
	ocamlc -c $<

%.cmx : %.ml
	ocamlfind ocamlopt -c -package llvm $<

CC=gcc
CFLAGS=-Wall -c
LDFLAGS=-L/usr/lib/x86_64-linux-gnu -lcurl

gantrylib_http.o : gantrylib_http.c
	$(CC) $(CFLAGS) gantrylib_http.c

# Testing the "printbig" example

# printbig : printbig.c
#	cc -o printbig -DBUILD_TEST printbig.c

# Testing the "stringconcat" example

string_concat : string_concat.c
	cc -o string_concat -DBUILD_TEST string_concat.c

### Generated by "ocamldep *.ml *.mli" after building scanner.ml and parser.ml
ast.cmo :
ast.cmx :
codegen.cmo : ast.cmo
codegen.cmx : ast.cmx
gantry.cmo : semant.cmo scanner.cmo parser.cmi codegen.cmo ast.cmo
gantry.cmx : semant.cmx scanner.cmx parser.cmx codegen.cmx ast.cmx
parser.cmo : ast.cmo parser.cmi
parser.cmx : ast.cmx parser.cmi
scanner.cmo : parser.cmi
scanner.cmx : parser.cmx
semant.cmo : ast.cmo
semant.cmx : ast.cmx
parser.cmi : ast.cmo

# Building the tarball

#TESTS = add1 arith1 arith2 arith3 fib for1 for2 func1 func2 func3	\
    func4 func5 func6 func7 func8 gcd2 gcd global1 global2 global3	\
    hello if1 if2 if3 if4 if5 local1 local2 ops1 ops2 var1 var2		\
    while1 while2 printbig

#FAILS = assign1 assign2 assign3 dead1 dead2 expr1 expr2 for1 for2	\
    for3 for4 for5 func1 func2 func3 func4 func5 func6 func7 func8	\
    func9 global1 global2 if1 if2 if3 nomain return1 return2 while1	\
    while2

#TESTFILES = $(TESTS:%=test-%.mc) $(TESTS:%=test-%.out) \
	    $(FAILS:%=fail-%.mc) $(FAILS:%=fail-%.err)

#TARFILES = ast.ml codegen.ml Makefile microc.ml parser.mly README scanner.mll \
	semant.ml testall.sh $(TESTFILES:%=tests/%) printbig.c arcade-font.pbm \
	font2c

#microc-llvm.tar.gz : $(TARFILES)
#	cd .. && tar czf microc-llvm/microc-llvm.tar.gz \
		$(TARFILES:%=microc-llvm/%)

